# install from yum

# обновляем репозиторий
# sudo yum install epel-release

# sudo yum install ansible



# install from apt 

# sudo apt-add-repository ppa:ansible/ansible

# sudo apt-get update

# sudo apt-get install ansible 




# install from pip 

# sudo pip install ansible 



ansible/
  hosts.txt
  ansible.cfg



# пример запуска ансибл по всем узлах из инвентори файла
# ansible all -m ping   


# вывести данные по файлу инвентори
# ansible-inventory --list 
# ansible-inventory --graph



# получить информацию по серверам
# ansible all -m setup


# запуск shell комманд на серверах
# ansible all -m shell -a "uptime"


# как shell но без доступа к переменным окружения и без поддержки спец символов ">", "<", "|", ";", "&"
# ansible all -m command -a "uptime"


# скопировать файл с вм с ансиблом на сервера. опционально mode меняет привелегии файла. -b скоприровать используя права root (sudo)
# ansible all -m copy -a "src=<path_to_file_in_ansible_machine> dest=<path_where_put_file_in_servers> [mode=777]" -b 


# удалить файл можно используя модуль file
# модуль file - бошльшой модуль, там много всего есть. подробнее в доке
# ansible all -m file -a "path=<paht_to_file_in_remote_servers> state=absent" -b 


# скачать файл по url
# ansible all -m get_url -a "url=https://...  dest=<dest_path>" -b 


# установить программу через yum 
# ansible all -m yum -a "name=<name_of_programm> state=<installed> " -b


# удалить программу через yum 
# ansible all -m yum -a "name=<name_of_programm> state=<removed> " -b


# проверить, есть ли доступ до указанного uri и получить контент ()
# ansible all -m uri -a "uri=https://..."
# ansible all -m uri -a "uri=https://... return_content=yes"



# работа с сервисами на удаленных серверах
# ansible all -m service -a "name=httpd state=started enabled=yes" -b 


# показать все модули
# ansible-doc -l 



# запустить плейбук
# опционально можно добавить имя файла со списком хостов, если его нет в ansible.cfg
# ansible-playbook playbook1.yaml 



по умолчанию любой севрер входит минимум в две группы:
  all 
  ungrouped / group_name


простой пример host.txt файла:

######## host.txt ###########

10.50.1.1
10.50.1.2

[staging_DB]
192.168.1.1
192.168.1.2

[staging_WEB]
192.168.2.1
192.168.2.2

[staging_APP]
192.168.3.1
192.168.3.2


[staging_ALL:children]
staging_DB
staging_WEB
staging_APP


[prod_DB]
10.10.1.1

[prod_WEB]
10.10.2.2

[prod_APP]
10.10.3.3


[prod_ALL:children]
prod_DB
prod_WEB
prod_APP


[DB_ALL:children]
staging_DB
prod_DB

[APP_ALL:children]
staging_APP
prod_APP

[RAZNOE:children]
DB_ALL
APP_ALL



[prod_servers:vars]
ansible_user=ec2-user


[RAZNOE:vars]
message=Hello

#############################




пример с переносом переменных из host.txt в group_vars

ansible/
  hosts.txt
  ansible.cfg
  group_vars/
    STAGING_SERVERS_WEB


#### STAGING_SERVERS_WEB #####

---
ansible_user                 : ec2-user
ansible_ssh_private_key_file : /home/ec2-user/.ssh/california-key.pom

##############################






Первые playbook


#### playbook1.yaml ####
---
- name   : Test connection to my servers 
  hosts  : all
  become : yes

  tasks  : 
  - name : ping my servers
    ping : 

########################


# запустить плейбук
# опционально можно добавить имя файла со списком хостов, если его нет в ansible.cfg
# ansible-playbook playbook1.yaml 




#### playbook2.yaml ####
---
- name   : Install default Apache Web Server
  hosts  : all
  become : yes

  tasks:
  - name : INstall Apache WebServer
    yum  : name=httpd state=installed

  - name : Start Apache and Enable it on the every boot 
    service : name=httpd state=started enabled=yes


########################




#### playbook3.yaml ####
---
- name  : Install Appache and up;oad my Web page
  hosts : all
  become: yes

  vars:                                                             # инициализируем переменные 
    source_file : ./MyWebSite/index.html
    destin_file : /var/www/html

  tasks:
  - name : Instal Appache Web Server 
    yum  : name=httpd state=latest

  - name   : Copy My Home Page To Servers 
    copy   : src={{ source_file }} dest={{ destin_file }} mode=555  # используем переменные
    notify : Restart Apache                                         # вызываем хендлер

  - name    : Start WebService and make it to boot 
    service : name=httpd  state=started enable=yes



  handlers:                                                         # создаем обработчик (типа функции) для вызова
  - name    : Restart Apache
    service : name=httpd state=restarted 

########################






Печатать переменные при дебагинге

ansible/
  ansible.cfg
  group_vars/
    PROD_SERVERS_WEB
  hosts.txt

#### group_vars/PROD_SERWERS_WEB ####
---
ansible_user                 : ec2-user 
ansible_ssh_private_key_file : /home/ec2-user/.ssh/california-key2.pom

#####################################


############# hosts.txt #############
[PROD_SERVERS_WEB]
linux1 ansible_host=10.10.10.1 oowner=Vasya
linux3 ansible_host=10.10.10.2 oowner=Petya
linux3 ansible_host=10.10.10.3 oowner=Kolya


#####################################


########### playbook.yaml ###########
---
- name   : My Super Playbook 
  hosts  : hosts.txt
  become : yes

  var:
    message1 : Privet 
    message2 : World 
    secret   : QWEASDQWEASDQWEASDQWE

  tasks:
  - name  : Print Secret variables
    debug :                                                                         # модуль для дебага
      var : secret                                                                  # когда используем var фигурные скобки у переменных не нужны

  - name  : debug2, print message
    debug :
      msg : "Secretnot slovo: {{ secret }}"                                         # модуль для вывода сообщений

  - name  : debug3, print message
    debug :
      msg : "Vladelec etogo servera --> {{ owner }} <--"

  - name     : create new var full_message
    set_fact : full_message="{{ message1 }} {{ message2 }} from {{ owner }}"        # модуль для создания переменных


  - name  : print volume of new var
    debug :
      var : full_message 

  - name  : print standart var which would see in list used module "setup"
    debug : 
      var : ansible_distribution                                                    # вывести значение стандартной переменной, список которых можно получить используя модуль setup

  - name     : Save printouts commands to var 
    shell    : uptime 
    register : results                                                              # записать результат вывода shell команды (uptime) в переменную

  - name  : Print saved var results 
    debug :
      var : results                                                                 # Вывести сохраненные значения в переменной

  - name  : Print some param from results
    debug : 
      var : results.stdout                                                          # вывести какое-то конкретное значение, если переменная содержит словарь json
    

#####################################





Блоки и Условия





########### playbook5.yaml ###########
---
- name   : Install Apache and Upload my Home Page 
  host   : all 
  become : yes`

  vars:
    source_file : ./MyWebSite/index.html
    destin_file : /var/www/html

  tasks:
  - name  : Check and print Linux Version
    debug :
      var : ansible_os_family


  - block : # === Block for RedHat ===

    - name : Install Apache WebServer for RedHat
      yum  : name=httpd state=installed

    - name   : Copy Home Page file to Web Server
      copy   : 
        src    : {{ source_file }} 
        dest   : {{ destin_file }} 
        mode   : 0555
      notify : Restart Apache RedHat

    - name    : Start Web Server service RedHat
      service : name=httpd state=started endabled=yes

    when : ansible_os_family == "RedHat"


  - block : # === Block for Debian

    - name : Install Apache WebServer for Debian
      apt  : name=apache2 state=installed 

    - name   : Copy Home Page file to Web Server
      copy   : 
        src    : {{ source_file }} 
        dest   : {{ destin_file }} 
        mode   : 0555 
      notify : Restart Apache Debian

    - name    : Start Web Server service Debian
      service : name=httpd state=started endabled=yes

    when : ansible_os_family == "Debian"

  handlers:
  - name    : Restart Apache RedHat
    service : name=httpd state=restarted

  - name    : Restart Apache Debian
    service : name=apache2 state=restarted


#####################################




Циклы Loop, With+_Items, Until, With_fileglob





########### playbook_loop.yaml ###########
---
- name   : Loop Playbook
  hosts  : Linux3
  become : yes

  tasks:
  - name   : Say Hello All                                 # типа цикла for
    debug  : 
      msg  : "Hello {{ item }}"                            # item зарезервированное слово
      loop :                                               # в версии ansible 2.5 и сташе. в более младших версиях вместо нее with_items
        - "Vasya" 
        - "Petya" 
        - "Kolya"

  - name     : Loop Until Example                           # типа цикла until
    shell    : echo -n Z >> myfile.txt && cat myfile.txt
    register : results
    delay    : 2                                            # задержка, в секундах . опционально
    retries  : 10                                           # количество переповторов, по умолчанию 3 раза. опционально
    until    : results.stdout.find("ZZZZ") == false         # цикл будет повторяться до тех пор пока в файле не окажется искомое условие

  - name  : Print Final Results
    debug :
      var : results.stdout

  - name  : Install many packages
    yum   : name={{ item }} state=installed
      loop:
        - python
        - tree 
        - mysql-client


##########################################






########### playbook6.yaml ###########
---
- name   : Install Apache and Upload my Home Page 
  host   : all 
  become : yes`

  vars:
    source_folder : ./MyWebSite2
    destin_folder : /var/www/html

  tasks:
  - name  : Check and print Linux Version
    debug :
      var : ansible_os_family


  - block : # === Block for RedHat ===

    - name : Install Apache WebServer for RedHat
      yum  : name=httpd state=installed

    - name    : Start Web Server service RedHat
      service : name=httpd state=started endabled=yes

    when : ansible_os_family == "RedHat"


  - block : # === Block for Debian

    - name : Install Apache WebServer for Debian
      apt  : name=apache2 state=installed 

    - name    : Start Web Server service Debian
      service : name=httpd state=started endabled=yes

    when : ansible_os_family == "Debian"


#  - name : Copy Home Page file to Web Server                       # Скопировать файлы на сервера указав список файлов
#    copy : 
#      src    : {{ source_folder }}/{{ item }} 
#      dest   : {{ destin_file }}
#      mode   : 0555
#    loop : 
#      - "Index.html"
#      - "picture1.png"
#      - "picture2.png"
#      - "picture3.png"
#      - "picture4.png"      
#    notify : 
#      - Restart Apache RedHat
#      - Restart Apache Debian


#  - name : Copy Home Page file to Web Server                       # Скопировать файлы на сервера . Все файлы из папки
#    copy : 
#      src    : {{ item }} 
#      dest   : {{ destin_file }}
#      mode   : 0555
#    with_fileglob : "{{ source_folder }}*.*"

 
    notify : 
      - Restart Apache RedHat
      - Restart Apache Debian





  handlers:
  - name    : Restart Apache RedHat
    service : name=httpd state=restarted
    when : ansible_os_family == "RedHat"

  - name    : Restart Apache Debian
    service : name=apache2 state=restarted
    when : ansible_os_family == "Debian"

#####################################





Шаблоны Jinja - Templates


сгенерируем index.html для каждого сервера перед копированием

############## index.html ##############

<HTML>
<HEAD>
<TITLE>Name</TITLE>
<SCRIPT LANGUAGE="JavaScript">
      var sizes = new Array(0,1,2,4,8,10,12);
      size.pos = 0;

function Elastic ()
{
    var = document.all.Elastic
    if (null == el.direction).el.direction = 1
    else if ((sizes.pos > sizes.lenght - 2) || (0 == sizes.pos))
    el.direction *= -1
    el.style.letterSpacing = sizes[sizes.pos += el.direction]
setTimeout('Elastic()',100)
}

</SCRIPT>
<BODY bgcolor="gray" onLoad=Elastic()>
<CENTER>
<br><br><br><br>
<br><br><br><br>
<font color="green"><h2>This COOL WebServer Build By</h2>
<font color="gold"><H1 ID="elastic" ALGIN="Center"ANSIBLE></H1>
</body>
</HTML>

######################################