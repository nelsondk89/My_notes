
### 

# Статья-шпаргалка по линукс
https://habr.com/ru/companies/timeweb/articles/668344/



##### + Иерархия файловой системы Linux

Единое дерево директорий
/etc - конфигрурация
/home - Данные пользователей
/usr - приложения
/var - данные и логи
/tmp - временные файлы

##### -





##### + stdin, stfout, stderr

cut < test -d' ' -f 1
ls | grep test

# подсать строку на стандартный ввод программы (bc - калькулятор)
bc <<< "2*2"

# создаст файл или выведет фэйл
touch /tmp/foo || echo fail

# устновит аппач и если все ок, то стартанет сревис
yum -y install apache2 && service apache2 start


ps ax | grep kworker > /tmp/kworker.txt


код ответа
0 - истина
не 0 - ложь


##### - 



##### + Bash-скрипты

## +
## 

#!/bin/bash

PREFIX=ARG
for arg in "$@"
do
  echo "${PREFIX}: $arg"
  if [ -f "$arg" ] ; then
    echo "${arg} is a file"
  elif [ -d "$arg" ] ; then
    echo "${arg} is a dir"
  elif [ -L $arg ] ; then
    echo "${arg} is a link"
  fi
done

## -



## +

#!/bin/bash 

fing test/ -type f -print | shile read line : do 
    echo "TOP 3 from $line:"
    awk < $line '$NF > 6 {a[$(NF-1)]+=1} END\
    {for (i in a) print a[i], i}' | \
    sort -nr | head -3
done

## - 


##### -





##### + пользователи и группы

- Параметры пользователя
- Логин, [пароль], uid, gid, [имя/комментарий], домашняя директория, интерпретатор
- группы
- членство в группах


# проверить существование
getent passwd root
getent group root

# файл с юзерами
cat /etc/passwd

cat /etc/shadow

# посмотреть дату срока жизни пароля
chage -l <username>

# установить бесконечный срок жизни пароля
chage -M 99999 <username>


##### -




##### + Права доступа к файлам и директориям

- Владелец файла и его группа
- Стандартная восьмеричная маска доступа
- chmod 666
- sticky, setuid, setgid


owner  group  other

r w x  r w x  r w x
4 2 1  4 2 1  4 2 1
  7      7      7

# sticky bit - ставится на директорию, если установлен, то нельзя удалить файл если ты не его владелец. ( исп-ся для общих дирректорий типа tmp)
chmod +t /tmp



# setuid - бит доступа к файлу, позволяет зпускать программу с правами админа
chmod +s /bin/su 



# setgid - бит доступа к файлу, позволяет запускать программу с правами группы ( для возможности доступа к файлам, к которым пользователь не имеет доступа)


##### -






##### + Привелегии пользователей

- ВИды пользователей:
  - привелегированные
  - обычные
  - системные

- Привелегированный пользлваьель root
- кактстать рутом: su и sudo

##### -




##### + Удаленный доступ - основы

- ssh (secure shell) 

.ssh/authorized_keys


##### - 




##### + Загрузка системы

- BIOS (UEFI) - передает управление загрузчику, а загрузчик ядру
- Ядро отвечает за распределение ресурсов системы и абстракцию оборудования от приложений
- После инициализации оборудования ядро запускает init - основной процесс пространства пользователя.
  Init ответчает за запуск пользовательского окружения.

##### -





##### + Загрузка ОС 

- Два основных варианта загрузки системы - по сети или с локального диска (CD, HDD, дискета)
- Для загрузки по сети система получает конфигурацию сети и указания о том, где взять загрузчик, по DHCP/Bootp.
- Для загрузки с локального диска необходимо, что бы на этом диске была поддерживаемая BIOS-ом таблица разделов и присутствовал загрузчик.
- Основные виды таблиц разделов - MBR и GPT. Загрузку с GPT поддерживают новые версии BIOS на базе UEFI.




# dd if=/dev/sda bs=512 count=1 | file -

##### -



##### + Ядро Linux 

- Зачем вообще нужно ядро ОС: 
    - абстрация оборудования
    - управелет выделением ресурсов процессом запущенном в пользовательском окружении
    - при помощи системных вызовов обеспечивает доступ приложждений к некоторому набору ресурсов (ресрусы компа или или службы ОС)
    - в общем случае предоставляет для приложений набор системных вызовов.

- Как управлять ядром. Sysctl /etc/sysctl.{conf.d}
    позволяет работать с набором параметров ( ключ- значение или ключ - набор значений ) 

    # sysctl -a 2>/dev/null

- Модули ядра - динамически загружаемые части ядра.
    modprobe.d 
    # vim /etc/modprobe.d/mlx4.conf
    управляет загрузкой модулей ядра и у казывает с какими опциями им грузиться 


- Взаимодействие ядра и пользовательского окружения
- Псевдо ФС, предоставляемые ядром /dev, /sys, /proc



##### -





##### + Что такое процесс

- Процессы состоя из компонентов:
    - образ исполняемого кода
    - Адресное пространство
    - Набор дескрипторов
    - Атрибуты доступа (uid, gid, лимиты, etc)
    - контекст процессора

ps -ef | less - показывает пользователя, pid

/proc - директория с информацией о процессах

cat /proc/1/status | less - псевдойал с информацией какими свойствами обладает процесс


##### -





##### + Память процесса 

- Разнима между виртуальной и резидентной памятью
- Выделение памяти процессам. Понятие страницы.
- Информация о выделенной процессу памяти.
- Huge pages, обычные и прозрачные

##### - 




##### + Дескрипторы

- Дескриптор - идентификатор ресурса ввода/вывода
- Стандартные дескрипторы - 0 (stdin), 1 (stdout), 2 (stderr)
- Прочие дескрипторы выделяются для открытых файлов, установленных сетевых соединений и т.п.
- /proc/<pid>/fd , /proc/<pid>/fdinfo , /proc/net/* содержат информацию об открытых дескрипторах процесса
- lsof - утилита для просмотра дескрипторов процессов


ls -l /proc/1/fd

cat /proc/1/fdinfo/29

yum install lsof

lsof -p 1

lsof -p $$

##### -





##### + Потребление ресурсов процессора

- Основная информация - в /proc/<pid>/stat
- Общая информация о потреблении cpu в системе - /proc/stat
- User, system, iowait
- Работать с информацией в таком виде не всегда удобно. Утилита top
- Отслеживание производительности дискового I/O. iostat
- iostat -xmd 1


команда top , 3я строка Cpu(s):
  - us - user . процессорное время в коде приложений, которые выполняются в системе.
  - sy - system - время на системные вызовы
  - ni - как user , только те процессы, у которых уменьшен приоритет
  - id - время простоя
  - wa - время ожидания операций ввода\вывода
  - hi - аппаратное прерывание
  - si - програмное прерывание
  - st - steel - время выделанное для одной хостовой ноды, но потраченное другими виртуальными нодами


iostat - утилита для отслеживания ввода/вывода на дисках

iostat входит в пакет sysstat

yum install sysstat

iostat -xmd 1   - c периодичностью в одну секунду снимается нагрузка на диски

##### - 




##### + Системные вызовы 

- Системные вызовы - механизм взаимодействия ядра и приложений
- как работают системные вызовы. linux-vdso.so 
- Отслеживание системных вызовов. Команда strace
- strace -p 1 -f -tt -y
- strace -p 1 -f -c 


yum install strace 

# запустить какой-то процесс из под strace
strace ls 

# подключиться к какому то активному процессу по pid
strace -p <pid>

# запускаем и немного собираем статистику по системным процессам
strace -c -p <pid>

gdb
tcpdump

##### -




##### + Сигналы

- Сигналы - механизм связи с процессом
- Они предназначены для управления процессами и оповещения о событиях
- Обработчики сигналов
- Все ли сигналы можно обработать?
- kill, killall, pkill - основные утилиты командной строки для отправки сигналов
- man 7 signal



# посмотретьь номера сигналов
kill -l 

##### -





##### + Лимиты процесса 

- что такое Ulimit
- /etc/security/limits.conf
- Мягкие и жесткие лимиты 
- man limits.conf
- /proc/<pid>/limits 
- ulimit -a 
- Изменение лимитов запущенного процесса. prlimit
- prlimit --pid 1 --nofile=65536:65536

# управление лимитами
vim /etc/security/limits.conf

##### - 





###### + Переменные окружения

- Переменные окружения динамически изменяемый набор ключей и значений, относящихся к конкретному процессу
- printenv
- export
- /proc/<pid>/environ
- Основные служебные переменные окружения
- LD_PRELOAD
- LD_LIBRARY_PATH

# посмотреть переменные окружения процесса ($$ pid)
strings /proc/$$/environ

##### -





##### + Как размножаются процессы

- Как запустить процесс 
- Всем известный fork()
- Используется ли fork()?
- strace -f -y su -c ls 2>&1 | less 
- Семейство exec()
- Дерево процессов 
- Откуда берутся зомби

##### -




##### + Что делает процесс 

- Системные вызовы, осуществляемые процессом, можно отслеживать с помощью strace
- Если процесс не делает системных вызовов, но потребляет ресурсы, как понять чем он занимается? утилита pstack
- все равно не понятно, нужна отладочная информация.
- yum install --enablerepo=base-debuginfo glibc-debuginfo

##### -





##### + perf

- что делать, если нужно отследить действия, выполняемые процессом и в пространстве пользователя, и в пространстве ядра
- Подсистема perf отвечает за сбор "слепков" состояния процесса. Статистика по этим слепкам используется для отладки и профилирования.

yum install perf 

perf top -p 1 

perf stat ls 

perf trace ls 

##### -





##### + логи

- Как узнать, что происходило раньше?
- Логи системы и логи приложений
- dmesg
- Системный логгер. Зачем он нужен?
- /var/log/messages - основной лог системы 
- /var/log/secure - события, связанные с логином пользователей и повышением привилегий
- Логи приложений 



##### -



##### + Layer 2. Ethernet

- Предназначен для использования в пределах локальных сетей
- В качестве адресов используются уникальные идентификаторы сетевых интерфейсов - т.н. MAC-адреса
- MTU (max transmition unit)
- arp (adress resoulution protocol) - протокол разрешения адресов


yum install arp


##### -




##### + IP

- Маршрутизируемый протокол
    отправитель и получатель не обязаны быть связаны напрямую
- Доставка без гарантий
    пакеты могу теряться без уведомлений, меняться местами и т.п.
- четырехбайтные адреса 
- Таблица маршрутов
- Path MTU. Фрагментация пакетов.

mtr ya.ru

##### -




##### + ICMP

Протокол передачи служебных сообщений

ping
traceroute

##### -




##### + Мультикаст в IPv4

- Подсеть 224.0.0.0/4
- IGMP используется в локальной сети 
- PIM отвечает за маршрутизацию мультикаста через интернет

##### -





##### + IPv6

основные отличия от IPv4:
  - Длина адреса 
  - SLAAC. новый метод автоконфигурации.
  - Несколько маршрутизаторов. Приоритеты.
  - Path MTU Discovery. Роутеры больше не фрагментируют
  - Neighbor Discovery Protocol

##### -